MODULE main
	VAR
		LOCKED: boolean; -- semaphore
		-- HIGH: boolean; -- high-value

		-- SCHEDULE: 0..2; -- 0:p1 moves, 1:p2 moves, 2: both moves
		-- ID_one: 0..1;
		-- ID_two: 0..1;

		proc1: programs(LOCKED, 0);
		proc2: programs(LOCKED, 0);
	ASSIGN
		init(LOCKED):= FALSE;
		next(LOCKED):= LOCKED;

MODULE programs(LOCKED, initline)
	VAR
		line: 0..5;

		var_X: boolean;
		var_Y: 0..4;
		var_Z: 0..4;
		var_W: 0..4;
		var_temp: 0..4;
		var_size: 0..4;

		arrA_pos0: 0..4;
		arrA_pos1: 0..4;
		arrA_pos2: 0..4;
		arrA_pos3: 0..4;
		arrA_pos4: 0..4;

		arrB_pos0: 0..4;
		arrB_pos1: 0..4;
		arrB_pos2: 0..4;
		arrB_pos3: 0..4;
		arrB_pos4: 0..4;

		offset: 0..1;

	ASSIGN

		init(var_X) := FALSE;
		next(var_X) :=
		case
			(line=0) : (var_Y < var_size);
			TRUE: var_X;
		esac;

		init(var_Y) := 2;
		next(var_Y) := var_Y;

		init(var_Z) := 0;
		next(var_Z) :=
		case
			((line=2) & (var_Y=0)) : {arrA_pos0};
			((line=2) & (var_Y=1)) : {arrA_pos1};
			((line=2) & (var_Y=2)) : {arrA_pos2};
			((line=2) & (var_Y=3)) : {arrA_pos3};
			((line=2) & (var_Y=4)) : {arrA_pos4};
			((line=3) & (var_Z<3) & (offset=0)) : {var_Z+0};
			((line=3) & (var_Z<3) & (offset=1)) : {var_Z+1};
			((line=3) & (var_Z<3) & (offset=2)) : {var_Z+2};
			((line=3) & (var_Z>= 3)) : {4};
			TRUE: var_Z;
		esac;

		init(var_W) := 0;
		next(var_W) :=
		case
			((line=4) & (var_Z=0)) : {arrB_pos0};
			((line=4) & (var_Z=1)) : {arrB_pos1};
			((line=4) & (var_Z=2)) : {arrB_pos2};
			((line=4) & (var_Z=3)) : {arrB_pos3};
			((line=4) & (var_Z=4)) : {arrB_pos4};
			TRUE: var_W;
		esac;

		init(var_temp) := 0;
		next(var_temp) :=
		case
			(line=5): {var_W};
			TRUE: var_temp;
		esac;
		-- init(line) := 1;
		init(line) := initline;
		next(line) :=
			case
				-- (!(SCHEDULE=ID | SCHEDULE=2)) : line;
				-- program1
				(line=0) : {1}; --
				(line=1) : {2}; -- speculative execution always proceed
				-- (line=1 & (!var_X)) : {5}; -- if index out of bound, terminate
				-- (line=1 & (var_X)) : {2};
				(line=2) : {3}; -- load z (v1)
				(line=3) : {4}; -- shift pointer
				(line=4) : {5}; -- load w (v2)
				(line=5 & rollback) : {0};
				(line=5 & !rollback) : {5};
				TRUE: line;
			esac;


			-- STATIC VARIABLES
			init(var_size) := 3;
			next(var_size) := var_size;

			init(offset) := 1;
			next(offset) := offset;

			init(arrA_pos0) := 0;
			next(arrA_pos0) := arrA_pos0;
			init(arrA_pos1) := 1;
			next(arrA_pos1) := arrA_pos1;
			init(arrA_pos2) := 2;
			next(arrA_pos2) := arrA_pos2;
			init(arrA_pos3) := 3;
			next(arrA_pos3) := arrA_pos3;
			init(arrA_pos4) := 4;
			next(arrA_pos4) := arrA_pos4;

			init(arrB_pos0) := 0;
			next(arrB_pos0) := arrB_pos0;
			init(arrB_pos1) := 1;
			next(arrB_pos1) := arrB_pos1;
			init(arrB_pos2) := 2;
			next(arrB_pos2) := arrB_pos2;
			init(arrB_pos3) := 3;
			next(arrB_pos3) := arrB_pos3;
			init(arrB_pos4) := 4;
			next(arrB_pos4) := arrB_pos4;



	DEFINE
		halt := (line=5);
		start := (line=2);
		rollback := (line=5);
		load := (line=2 | line=4);
