MODULE main
	VAR
		offset: 0..2;
		var_Y: 0..4;
		var_size: 0..4;

		-- LOCKED: boolean; -- semaphore
		proc1: program(0, var_Y, var_size, offset);
		-- proc2: programs(0, 1, 2, offset);
	ASSIGN
		-- init(offset):= (0| 1 | 2);
		next(offset):= offset;
		next(var_Y):= var_Y;
		next(var_size):= var_size;

MODULE program(initline, var_Y, var_size, offset)
	VAR
		line: 0..3;

		-- var_X: boolean;
		-- var_Y: 0..4;
		-- var_Z: 0..4;
		-- var_W: 0..4;
		var_temp: 0..4;
		-- offset: 0..1;
		-- var_size: 0..4;

		arrA_pos0: 0..4;
		arrA_pos1: 0..4;
		arrA_pos2: 0..4;
		arrA_pos3: 0..4;
		arrA_pos4: 0..4;

		arrB_pos0: 0..4;
		arrB_pos1: 0..4;
		arrB_pos2: 0..4;
		arrB_pos3: 0..4;
		arrB_pos4: 0..4;


	ASSIGN

		init(var_temp) := 0;
		next(var_temp) :=
		case
			(line=2 & ((var_Y+offset)=0)): {arrB_pos0};
			(line=2 & ((var_Y+offset)=1)): {arrB_pos1};
			(line=2 & ((var_Y+offset)=2)): {arrB_pos2};
			(line=2 & ((var_Y+offset)=3)): {arrB_pos3};
			(line=2 & ((var_Y+offset)=4)): {arrB_pos4};
			TRUE: var_temp;
		esac;
		-- init(line) := 1;
		init(line) := initline;
		next(line) :=
		case
			-- (!(SCHEDULE=ID | SCHEDULE=2)) : line;
			-- program1
			(line=0) : {1}; --
			(line=1 & (var_Y >= var_size)) : {1}; -- if index out of bound, terminate
			(line=1 & (var_Y <  var_size)) : {2}; -- if index out of bound, terminate
			(line=2) : {3}; --
			TRUE: line;
		esac;


		-- STATIC VARIABLES
		-- init(var_size) := 3;
		-- next(var_size) := var_size;

		-- init(var_Y) := 2;
		-- next(var_Y) := var_Y;

		-- init(offset) := 1;
		-- next(offset) := offset;

		init(arrA_pos0) := 0;
		next(arrA_pos0) := arrA_pos0;
		init(arrA_pos1) := 1;
		next(arrA_pos1) := arrA_pos1;
		init(arrA_pos2) := 2;
		next(arrA_pos2) := arrA_pos2;
		init(arrA_pos3) := 3;
		next(arrA_pos3) := arrA_pos3;
		init(arrA_pos4) := 4;
		next(arrA_pos4) := arrA_pos4;

		init(arrB_pos0) := 0;
		next(arrB_pos0) := arrB_pos0;
		init(arrB_pos1) := 1;
		next(arrB_pos1) := arrB_pos1;
		init(arrB_pos2) := 2;
		next(arrB_pos2) := arrB_pos2;
		init(arrB_pos3) := 3;
		next(arrB_pos3) := arrB_pos3;
		init(arrB_pos4) := 4;
		next(arrB_pos4) := arrB_pos4;



	DEFINE
		halt := (line=3);
		-- start := (line=2);
		-- rollback := (line=5);
		-- load := (line=2 | line=4);
