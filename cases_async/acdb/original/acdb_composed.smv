MODULE main
	VAR
		LOCKED: boolean; -- semaphore
		in_HIGH: boolean; -- in_HIGH-value

		-- use two modules to perform async-composition
		SCHEDULE: 0..1; -- 0:p1 moves, 1:p2 moves
		ID_one: 0..1;
		ID_two: 0..1;

		proc1: programs(ID_one, SCHEDULE, LOCKED, in_HIGH, 1);
		proc2: programs(ID_two, SCHEDULE, LOCKED, in_HIGH, 6);

	ASSIGN
		init(ID_one) := 0;
		next(ID_one) := 0;
		init(ID_two) := 1;
		next(ID_two) := 1;
		init(LOCKED):= FALSE;
		next(LOCKED) :=
			case
				(proc1.line=2 | proc1.line=3 | proc1.line=4 | proc2.line=2 | proc2.line=3 | proc2.line=4 ) : TRUE;
				(proc1.line=9 | proc2.line=9) : TRUE;
				TRUE: FALSE;
			esac;
		init(SCHEDULE) := {0,1};
		next(SCHEDULE) :=
			case
				(proc1.line=5): 1;
				(proc2.line=11): 0;
				TRUE: {0,1};
			esac;

		init(in_HIGH):= {TRUE, FALSE};
		next(in_HIGH):= in_HIGH;

	DEFINE
		-- halting condition
		halt := ((proc1.line=5) & (proc2.line=11));
		obs_printA := (proc1.line=3);
		obs_printB := (proc1.line=4);
		obs_printC := (proc2.line=6);
		obs_printD := (proc2.line=11);


MODULE programs(ID, SCHEDULE, LOCKED, in_HIGH, initline)
	VAR
		line: 1..11;

	ASSIGN
		init(line) := initline;
		next(line) :=
			case
				(!(SCHEDULE=ID)) : line;
				-- program1,diameter=4
				(line=1 & LOCKED) : {1}; -- wait if LOCKED
				(line=1 & !LOCKED) : {2}; -- else go to 2
				(line=2) : {3}; -- LOCK it
				(line=3) : {4}; -- print A
				(line=4) : {5}; -- print B
				(line=5) : {5}; -- UNLOCK, END
				-- program2,diameter==5
				(line=6) : {7}; -- print C
				(line=7 & in_HIGH) : {8}; -- if in_HIGH, proceed
				(line=7 & !in_HIGH) : {11}; -- if !in_HIGH, skip to end
				(line=8 & LOCKED) : {8}; -- wait if LOCKED
				(line=8 & !LOCKED) : {9}; -- else, proceed
				(line=9) : {10}; -- LOCK
				(line=10) : {11}; -- UNLOCKEd
				(line=11) : {11}; -- print D, END
				TRUE: line;
			esac;
