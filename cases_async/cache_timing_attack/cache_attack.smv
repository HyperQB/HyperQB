MODULE main
	VAR
		-- LOCKED: boolean; -- semaphore
		in_HIGH: boolean; -- in_HIGH-value
		in_LOW: boolean; -- in_LOW-value

		-- SCHEDULE: 1..3; -- 0:p1 moves, 1:p2 moves, 2:p3 moves
		ID_one: 1..4;
		ID_two: 1..4;
		ID_three: 1..4;
		-- ID_four: 1..4;

		counter_MMMMMMMMM: 0..4;
		wait_p: 0..3;
		wait_n: 0..3;
		wait_mn: 0..7;

		proc1: programs(ID_one, in_LOW, in_HIGH, 1, counter_MMMMMMMMM, wait_n, wait_mn);
		proc2: programs(ID_two, in_LOW, in_HIGH, 6, counter_MMMMMMMMM, wait_n, wait_mn);
		proc3: programs(ID_three, in_LOW, in_HIGH, 13, counter_MMMMMMMMM, wait_n, wait_mn);
		-- proc4: programs(ID_four, SCHEDULE, in_LOW, in_HIGH,  var_X, var_Y, 9);

	ASSIGN
		init(ID_one) := 1;
		next(ID_one) := 1;
		init(ID_two) := 2;
		next(ID_two) := 2;
		init(ID_three) := 3;
		next(ID_three) := 3;
		-- init(ID_four) := 4;
		-- next(ID_four) := 4;

		init(counter_MMMMMMMMM):= 0;
		next(counter_MMMMMMMMM):=
			case
				(proc2.PC______________pc=9 & (counter_MMMMMMMMM!=0)): counter_MMMMMMMMM - 1;
				(proc1.PC______________pc=3): 4;
				TRUE: counter_MMMMMMMMM;
			esac;

		init(wait_p):= 3;
		next(wait_p):= wait_p;

		init(wait_n):= 3;
		next(wait_n):=
			case
				((proc2.PC______________pc=7) & !(wait_n=0)): wait_n - 1;
				TRUE: wait_n;
			esac;

		init(wait_mn):= 7;
		next(wait_mn):=
			case
				((proc3.PC______________pc=14) & !(wait_mn=0)): wait_mn - 1;
				TRUE: wait_mn;
			esac;

		init(in_HIGH):= {TRUE, FALSE};
		next(in_HIGH):=
			case
				TRUE: in_HIGH;
			esac;

		init(in_LOW):= {TRUE, FALSE};
		next(in_LOW):=
			case
				TRUE: in_LOW;
			esac;

	DEFINE
		-- halt := (proc1.loop_count=1 & proc2.loop_count=1 & proc3.loop_count=1);
		halt := (proc2.PC______________pc=11 & proc3.PC______________pc=16);
		obs_PRINT_ONE := (proc2.PC______________pc=11);
		obs_PRINT_ZERO := (proc3.PC______________pc=16);


MODULE programs(ID, in_LOW, in_HIGH, initPC______________pc, counter_MMMMMMMMM, wait_n, wait_mn)
	VAR
		PC______________pc: 0..16;
		-- loop_count: 0..2;

	ASSIGN
		-- init(loop_count) := 0;
		-- next(loop_count) :=
		-- 	case
		-- 		(loop_count=2): 2;
		-- 		(ID=0 & PC______________pc=0 ): loop_count+1;
		-- 		(ID=1 & PC______________pc=6 ): loop_count+1;
		-- 		(ID=2 & PC______________pc=9 ): loop_count+1;
		-- 		TRUE: loop_count;
		-- 	esac;

		init(PC______________pc) := initPC______________pc;
		next(PC______________pc) :=
			case
				-- (!(SCHEDULE=ID)) : PC______________pc;

				-- program1
				-- L1: while (true)
				-- L2: if (high == low):
				-- L3:  fill (high_array) -- set counter_MMMMMMMMM = 4
				-- L4:  else: skip n + m + p
				(PC______________pc=1): 2;
				(PC______________pc=2 &  (in_LOW=in_HIGH)): 3;
				(PC______________pc=2 & !(in_LOW=in_HIGH)): 4;
				(PC______________pc=3):  3;
				(PC______________pc=4):  4;


				-- program2
				-- L6: while(true)
				-- L7: skip n
				-- L8: if (cache filled):
				-- L9:   clean-array
				-- L10: read
				-- L11: output(1)
				(PC______________pc=6): 7;
				(PC______________pc=7 & wait_n!=0): 7;
				(PC______________pc=7 & wait_n=0): 8;
				(PC______________pc=8 & counter_MMMMMMMMM!=0): 9;
				(PC______________pc=8 & counter_MMMMMMMMM=0): 10;
				(PC______________pc=9 & counter_MMMMMMMMM!=0): 9;
				(PC______________pc=9 & counter_MMMMMMMMM=0): 10;
				(PC______________pc=10): 11;
				(PC______________pc=11): 11;


				--  program3
				-- L13: while (true)
				-- L14: skip n+m
				-- L15: read-array
				-- L16: output(0)
				(PC______________pc=13): 14;
				(PC______________pc=14 & wait_mn!=0): 14;
				(PC______________pc=14 & wait_mn=0): 15;
				(PC______________pc=15): 16;
				(PC______________pc=16): 16;


				TRUE: PC______________pc;
			esac;

	-- DEFINE
	-- 	start := (PC______________pc=0);
