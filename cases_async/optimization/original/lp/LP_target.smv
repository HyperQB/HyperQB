
 MODULE main
 VAR
    step: 0..14;
    int_x: 0..15;
    int_k: 0..3;
    in_secret: 0..3;
    public_out: 0..3;

  ASSIGN

    -- L0:
    -- L1: x = 0
    -- L2: k = 0
    -- L3: if (k == 0)
    -- L4: {x := in_secretput();}
    -- L5: else {x := x + x;}
    -- L6: k := k + 1;
    -- L7: public_output = (x % k);
    -- L8: while (k < 3) {
    -- L9: if (k == 0) {
    -- L10:  x := in_secretput();}
    -- L11: else {x := x + x;}
    -- L12: k := k + 1;
    -- L13: public_output(x % k);
    -- L14: END
  init(step):= 0;
  next(step):=
    case
      (step=0): {1};
      (step=1): {2};
      (step=2): {3};
      ((step=3) &  (int_k=0)): {4};
      ((step=3) & !(int_k=0)): {5};
      (step=4): {6};
      (step=5): {6};
      (step=6): {7};
      (step=7): {8};
      ((step=8) &  (int_k<3)): {9};
      ((step=8) & !(int_k<3)): {14};
      ((step=9) &  (int_k=0)): {10};
      ((step=9) & !(int_k=0)): {11};
      (step=10): {12};
      (step=11): {12};
      (step=12): {13};
      (step=13): {8};
      (step=14): {14};
      TRUE: step;
    esac;

  init(int_x) := 0;
  next(int_x) :=
    case
      ((int_x+int_x)>15): 15;
      (step=4) : in_secret;
      (step=5) : int_x+int_x;
      (step=10) : in_secret;
      (step=11) : int_x+int_x;
      TRUE: int_x;
    esac;

  init(int_k) := 0;
  next(int_k) :=
    case
      (int_k=3): 3;
      (step=6) : int_k+1;
      (step=12) : int_k+1;
      TRUE: int_k;
    esac;

  init(public_out) := 0;
  next(public_out) :=
    case
      ((step=7)& !(int_k=0)): int_x mod int_k;
      ((step=13)& !(int_k=0)): int_x mod int_k;
      TRUE: public_out;
    esac;

  init(in_secret) := {0, 1, 2, 3};
  next(in_secret) := in_secret;

  DEFINE
  halt := (step=14);
