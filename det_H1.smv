MODULE main
	VAR
		LOCKED: boolean; -- semaphore
		HIGH: boolean; -- high-value

		-- SCHEDULE: 0..2; -- 0:p1 moves, 1:p2 moves, 2: both moves
		ID_one: 0..1;
		ID_two: 0..1;

		proc1: programs(ID_one, SCHEDULE, LOCKED, HIGH, 1);
		proc2: programs(ID_two, SCHEDULE, LOCKED, HIGH, 6);

	ASSIGN
		init(ID_one) := 0;
		next(ID_one) := 0;
		init(ID_two) := 1;
		next(ID_two) := 1;
		init(LOCKED):= FALSE;
		next(LOCKED) :=
			case
				(proc1.line=2 | proc1.line=3 | proc1.line=4 ) : TRUE;
				(proc2.line=9) : TRUE;
				TRUE: FALSE;
			esac;
		init(HIGH):= TRUE;
		next(HIGH):= HIGH;


MODULE programs(ID, SCHEDULE, LOCKED, HIGH, initline)
	VAR
		line: 1..11;

	ASSIGN

		-- init(line) := 1;
		init(line) := initline;
		next(line) :=
			case
				-- (!(SCHEDULE=ID | SCHEDULE=2)) : line;
				-- program1
				(line=1 & LOCKED) : {1}; -- wait if LOCKED
				(line=1 & !LOCKED) : {2}; -- else go to 2
				(line=2) : {3}; -- LOCK it
				(line=3) : {4}; -- print A
				(line=4) : {5}; -- print B
				(line=5) : {5}; -- UNLOCK, END
				-- program2
				(line=6) : {7}; -- print C
				(line=7 & HIGH) : {8}; -- if HIGH, proceed
				(line=7 & !HIGH) : {10}; -- if !HIGH, skip to end
				(line=8 & LOCKED) : {8}; -- wait if LOCKED
				(line=8 & !LOCKED) : {9}; -- else, proceed
				(line=9) : {10}; -- LOCK
				(line=10) : {11}; -- UNLOCKEd
				(line=11) : {11}; -- print D, END
				TRUE: line;
			esac;

	DEFINE
		printA := (line=3);
		printB := (line=4);
		printC := (line=7);
		printD := (line=11);
		halt := (line=5) | (line=11);
